<?php

class Link extends DataMapper {

    public $db_params = 'default';
    public $table = 'links';
    public $has_many = array('menu_item', 'article_item');
    public static $ci;
    public $validation = array(
        array(
            'field' => 'active',
            'label' => 'Active',
            'rules' => array('trim', 'min_length' => 1, 'max_length' => 2)
        )
    );

    function __construct() {
        parent::__construct();
        if (empty(self::$ci)) {
            self::$ci = &get_instance();
        }
        self::$ci->load->model(array('core/lang_model'));
        $this->sorted_menu_items = array();
    }

    public function set_from_default() {
        return 0;
    }

    public function set_link($menu_item_id, $component_name, $content_id, $component_id, $main) {

        $menu_item = new Menu_item();
        $menu_item->get_by_id($menu_item_id);

        $check_link = new Link();
        $check_link->get_by_related($menu_item);
        $check_link->delete_all();

        if ($component_id) {
            $component = new Component();
            $component->get_by_id($component_id);

            $langs = self::$ci->lang_model->get_langs();
            $links = false;
            foreach ($langs as $lang) {

                $name = self::$ci->input->post('link_' . $lang['iso_code']);
                if ($name !== FALSE AND !empty($name)) {

                    $link = new Link();

                    $link->link = self::$ci->input->post('link_' . $lang['iso_code']);
                    $link->url = $component_name . '/' . $content_id . '/' . $menu_item_id . '/' . $main . '/' . $lang['id'];
                    $link->server_method = $component->server_controller . '/' . $content_id . '/' . $menu_item_id . '/' . $main . '/' . $lang['id'];
                    $link->main = $main;
                    $link->language_id = $lang['id'];

                    $link->save();

                    $link->save($menu_item);

                    $arr = $link->to_array();

                    $links[$lang['iso_code']] = $arr;
                }
            }
            return $links;
        } else {
            return false;
        }
    }

    public function get_link($menu_item_id) {
        $menu_item = new Menu_item();

        $menu_item->get_by_id($menu_item_id);

        $link = new Link();

        $link->get_by_related($menu_item);

        $links = FALSE;

        foreach ($link as $l) {
            switch ($l->language_id):
                case 1:
                    $links['en'] = $l->to_array();
                    break;
                case 2:
                    $links['ru'] = $l->to_array();
                    break;
                case 3:
                    $links['ua'] = $l->to_array();
                    break;
            endswitch;
        }
        return $links;
    }

    public function check_link() {
        $link = new Link();

        $link->get();

        $result = 0;

        foreach ($link as $l) {
            if ($l->link == self::$ci->input->post('link') && $l->id == self::$ci->input->post('link_id')) {
                $result = 0;
            } else if ($l->link == self::$ci->input->post('link')){
                $result = 1;
            }
        }

        return $result;
    }

    public function get_link_to_user() {
        $link = new Link();

        $link->select('link, url')->get();

        return $link->all_to_array();
    }

    public function get_component_name($menu_item_id, $language_id) {
        $menu_item = new Menu_item();

        $menu_item->get_by_id($menu_item_id);

        $link = new Link();

        $link->get_by_related($menu_item);

        $component_name = false;

        foreach ($link as $l) {
            if ($l->language_id == $language_id) {
                $component_name = $l->link;
            }
        }


        return $component_name;
    }

    public function delete_link($menu_item_id) {
        $menu_item = new Menu_item();
        $menu_item->get_by_id($menu_item_id);

        $check_link = new Link();
        $check_link->get_by_related($menu_item);
        $check_link->delete_all();
    }

    public function set_article_link($menu_item_id, $content_id, $component_id, $main) {

        $article_item = new Article_item();
        $article_item->get_by_id($content_id);

        $check_link = new Link();
        $check_link->get_by_related($article_item);
        $check_link->delete_all();

        if ($component_id) {
            $component = new Component();
            $component->get_by_id($component_id);

            $link = new Link();

            $link->link = self::$ci->input->post('link');
            $link->url = $component->name . '/' . $content_id . '/' . $menu_item_id . '/' . $main . '/' . self::$ci->input->post('language_id');
            $link->server_method = $component->server_controller . '/' . $content_id . '/' . $menu_item_id . '/' . $main . '/' . self::$ci->input->post('language_id');
            $link->main = $main;
            $link->language_id = self::$ci->input->post('language_id');

            if ($link->save()) {
                $link->save($article_item);

                return $link->to_array();
            }
        } else {
            return false;
        }
    }

    public function get_article_link($article_item_id) {

        $article_item = new Article_item();

        $article_item->get_by_id($article_item_id);

        $link = new Link();

        $link->get_by_related($article_item);

        $links = FALSE;

        foreach ($link as $l) {
            switch ($l->language_id):
                case 1:
                    $links['en'] = $l->to_array();
                    break;
                case 2:
                    $links['ru'] = $l->to_array();
                    break;
                case 3:
                    $links['ua'] = $l->to_array();
                    break;
            endswitch;
        }

        return $links;
    }

    public function get_article_link_for_user($article_item_id) {

        $article_item = new Article_item();

        $article_item->get_by_id($article_item_id);

        $link = new Link();

        $link->get_by_related($article_item);

        $links = FALSE;

        foreach ($link as $l) {
            switch ($l->language_id):
                case 1:
                    if (!empty($l->link) && $l->link !== '')
                        $links['en'] = array('link' => $l->link, 'url' => $l->url);
                    else
                        $links['en'] = false;
                    break;
                case 2:
                    if (!empty($l->link) && $l->link !== '')
                        $links['ru'] = array('link' => $l->link, 'url' => $l->url);
                    else
                        $links['ru'] = false;
                    break;
                case 3:
                    if (!empty($l->link) && $l->link !== '')
                        $links['ua'] = array('link' => $l->link, 'url' => $l->url);
                    else
                        $links['ua'] = false;
                    break;
            endswitch;
        }

        return $links;
    }

    public function get_article_component_name($article_item_id, $lang_id) {
        $article_item = new Article_item();

        $article_item->get_by_id($article_item_id);

        $link = new Link();

        $link->get_by_related($article_item);

        $component_name = false;

        foreach ($link as $l) {
            if ($l->language_id == $lang_id) {
                $component_name = $l->link;
            }
        }

        return $component_name;
    }

    public function delete_article_link($a_i_id = false) {
        $article_item = new Article_item();

        $article_item_id = self::$ci->input->post('article_item_id') ? self::$ci->input->post('article_item_id') : $a_i_id;

        $article_item->get_by_id($article_item_id);

        $check_link = new Link();
        $check_link->get_by_related($article_item);
        $check_link->delete_all();
    }

    public function get_all_site() {
        $menu_item = new Menu_item();

        $menu_item->get();

        $result = false;

        $menu_item = new Menu_item();

        $menu_item->get_by_href('site/0');

        $result['menu_item'] = $menu_item->get_menu_item_by_id($menu_item->id);

        $menu_block = new Menu_block();

        $menu_block->where_in('id', array(3,4))->get();

        foreach ($menu_block as $m_b){
            $menu_item = new Menu_item();

            $menu_item->order_by('position')->get_by_related($m_b);

            $final_elements = $menu_item->all_to_array();


            foreach ($final_elements as $f)  {
                $arr[] = $f['id'];
            }
        }

        $fin_arr = $arr;

        foreach ($arr as $a)  {
            $k = 0;
            foreach ($arr as $key => $m)  {
                if ($a == $m){
                    $k++;
                }
                if ($k > 1){
                    unset($fin_arr[$key]);
                    $k--;
                }
            }
        }

        foreach ($fin_arr as $f)  {
            $menu = new Menu_item();
            $bufer[] = $menu->get_menu_item_by_id($f);
        }


        $this->get_sort_menu_items($bufer, 0, 0);

        $result['data'] = $this->sorted_menu_items;

        return $result;
    }

    public function get_sort_menu_items($data, $parent_id, $lvl) {
        $lvl++;

        $result = false;

        foreach ($data as $key => $val) {
            if ($val['parent_id'] == $parent_id) {
                $bufer = $val;
                $bufer['lvl'] = $lvl;
                $result[] = $bufer;
            }
        }


        if ($result) {

            foreach ($result as $key => $val) {
                $this->sorted_menu_items[] = $val;
                $this->get_sort_menu_items($data, $val['id'], $lvl);
            }
        }
    }

    public function delete_component_content() {
        return true;
    }

    public function get_link_by_url($url) {

        $link = new Link();

        $link->get_by_url($url);

        $links = $link->to_array();

        if (!empty($links) && $links['link'] !== null && $links['link'] !== ''){
            return $links['link'];
        } else {
            return false;
        }
    }

    public function get_trilan_links(){
        $link = new Link();

        $link->get();

        foreach ($link as $l) {
            $tr_brs = new getLinks_006();
            $tr_brs_link = $tr_brs->get_by_uri($l->link);

            $tr_cpr = new getLinks_005();
            $tr_cpr_link = $tr_cpr->get_by_uri($l->link);

            $l->trilan_links_brs = $tr_brs_link;
            $l->trilan_links_cpr = $tr_cpr_link;

            echo $l->link . ' <br /> <div style="margin-left: 40px;">BRS: ' . $tr_brs_link . '</div><br /> <div style="margin-left: 40px;">CPR:' . $tr_cpr_link . '</div>';

            $l->save();
        }
    }
}

?>
